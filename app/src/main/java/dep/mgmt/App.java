/*
 * This source file was generated by the Gradle 'init' task
 */
package dep.mgmt;

import dep.mgmt.config.MongoDbConfig;
import dep.mgmt.config.ScheduleConfig;
import dep.mgmt.migration.MigrationService;
import dep.mgmt.util.ConstantUtils;
import io.github.bibekaryal86.shdsvc.helpers.CommonUtilities;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {
  private static final Logger log = LoggerFactory.getLogger(App.class);

  public static void main(String[] args) {
    log.info("Starting Dependency Management Service...");
    if (isMigration(args)) {
      log.info("Starting Data Migration...");
      MigrationService migrationService = new MigrationService();
      migrationService.migrateProcessSummaries(Boolean.TRUE);
      migrationService.migrateLatestVersions(Boolean.TRUE);
      migrationService.migrateGradleDependencies(Boolean.TRUE);
      migrationService.migrateGradlePlugins(Boolean.TRUE);
      migrationService.migratePythonPlugins(Boolean.TRUE);
      log.info("Completed Data Migration...");
    } else {
      App.init();
      ScheduleConfig.init();
      log.info("MongoDb Database Initialized: [{}]", MongoDbConfig.init());
      log.info("Started Dependency Management Service...");
    }
  }

  private static void init() {
    final Map<String, String> properties =
        CommonUtilities.getSystemEnvProperties(ConstantUtils.ENV_KEY_NAMES);
    final List<String> requiredEnvProperties =
        ConstantUtils.ENV_KEY_NAMES.stream()
            .filter(key -> !ConstantUtils.ENV_SERVER_PORT.equals(key))
            .toList();
    final List<String> errors =
        requiredEnvProperties.stream().filter(key -> properties.get(key) == null).toList();
    if (!errors.isEmpty()) {
      throw new IllegalStateException(
          "One or more environment configurations could not be accessed...");
    }
  }

  private static boolean isMigration(String[] args) {
    if (args.length == 1) {
      return Boolean.parseBoolean(args[0]);
    }
    return false;
  }
}
