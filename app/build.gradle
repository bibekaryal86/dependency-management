/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

buildscript {
    dependencies {
        classpath 'org.yaml:snakeyaml:2.5'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'com.diffplug.spotless' version '8.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_25
    targetCompatibility = JavaVersion.VERSION_25
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'io.github.bibekaryal86:shdsvc:1.0.7'
    implementation 'io.netty:netty-all:4.1.119.Final'

    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'org.codehaus.janino:janino:3.1.12'
    implementation 'org.quartz-scheduler:quartz:2.5.0'
    implementation 'org.mongodb:mongodb-driver-sync:5.6.1'
    implementation 'com.mailjet:mailjet-client:6.0.0'
    implementation 'org.jsoup:jsoup:1.21.1'
}

application {
    // Define the main class for the application.
    mainClass = 'dep.mgmt.App'
}

jar {
    archiveFileName = 'dep-mgmt.jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes "Main-Class": "dep.mgmt.App"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Exclude signature files that break verification
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
    }
}

// everything below is for local development only
import org.yaml.snakeyaml.Yaml

def loadAppCredentialsEnvVariables() {
    def file = file('../gcp/app-credentials.yaml')
    if (file.exists()) {
        def data = new Yaml().load(file.text)
        def properties = new Properties()

        if (data?.env_variables) {
            data.env_variables.each { key, value ->
                if (key != 'PORT') {
                    properties.setProperty(key, value)
                }
            }
        }
        return properties
    } else {
        println "Warning: app-credentials.yaml file not found!"
        return new Properties()
    }
}

def yamlProperties = loadAppCredentialsEnvVariables()

run {
    doFirst {
        yamlProperties.each { key, value ->
            environment key, value
        }
    }
}

